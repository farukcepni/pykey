import random
import string


class PyKey(object):
    UPPERS = string.ascii_uppercase
    LOWERS = string.ascii_lowercase
    DIGITS = string.digits
    PUNCTUATIONS = string.punctuation

    LETTERS = string.ascii_letters
    CHARACTERS = string.ascii_letters + string.digits + string.punctuation
    ALPHANUMERIC = string.ascii_letters + string.digits

    def __init__(self, length=10, charset=ALPHANUMERIC, prefix='', suffix='', repeated=True, adjacent=False):
        """
        :param length: specifies length of random key (include prefix and suffix length)
        :param charset: specific which characters will be used to generate key.
        :param prefix: will be added to start of random key
        :param suffix: will be added to end of key
        :param repeated: specifies whether each character may be repeated. if set as False,
                         each character can be used only once otherwise it may be more than once.
        :param adjacent: same character may be adjacent when this flag is True
                         otherwise key does not contain adjacent character.
        """

        if not repeated:
            assert length <= len(charset), 'charset count must be more than given length when repeated is False'

        if not adjacent:
            assert len(charset) > 1, 'charset count must be more than 1 when adjacent is False'

        fixed_letter_length = len(prefix) + len(suffix)
        if length < fixed_letter_length:
            raise AssertionError('given length must be more than %i because of prefix and suffix' % fixed_letter_length)

        self.length, self.charset = length, charset
        self.prefix, self.suffix = prefix, suffix
        self.repeated, self.adjacent = repeated, adjacent

    def get(self):
        """return random key is generated by given rules."""
        letters = []
        charset = self.charset
        last_letter = None
        random_letter_length = self.length - len(self.prefix) - len(self.suffix)

        while len(letters) < random_letter_length:
            char = random.choice(charset)

            if not self.adjacent and char == last_letter:
                continue

            if not self.repeated:
                charset = charset.replace(char, '')

            letters.append(char)
            last_letter = char

        return self.prefix + ''.join(letters) + self.suffix

